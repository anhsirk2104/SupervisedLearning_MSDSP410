library(ggplot2)
library(gridExtra)
library(knitr)
#library(rockchalk)
library(tidyverse)
library(data.table)
#library(utils)
library(DataExplorer)
library(scales)
library(zoo)
library(aTSA)
library(tseries)
library(forecast)
# 1) Load/attach the following packages via library():
# NOTE:  packages must be installed via install.packages() before they can be loaded.
#install.packages("zoo")
#install.packages("aTSA")
#install.packages("tseries")
#install.packages("forecast")
#install.packages("lubridate")
library(dplyr)
#library(flux)
library(ggplot2)
library(gridExtra)
library(knitr)
#library(rockchalk)
library(tidyverse)
library(data.table)
#library(utils)
library(DataExplorer)
library(scales)
library(zoo)
library(aTSA)
library(tseries)
library(forecast)
data <- read.csv("USStates.csv", sep = ",", stringsAsFactors = TRUE, na.strings = "", fileEncoding = "UTF-8-BOM")
View(data)
dim(data)
str(data)
# DO NOT ADD OR REVISE CODE HERE
knitr::opts_chunk$set(echo = FALSE, eval = TRUE)
adf.test(as.matrix(covid_data_us_ps_cf_stat))
# DO NOT ADD OR REVISE CODE HERE
knitr::opts_chunk$set(echo = FALSE, eval = TRUE)
# 1) Load/attach the following packages via library():
# NOTE:  packages must be installed via install.packages() before they can be loaded.
#install.packages("zoo")
#install.packages("aTSA")
#install.packages("tseries")
#install.packages("forecast")
#install.packages("lubridate")
library(dplyr)
#library(flux)
library(ggplot2)
library(gridExtra)
library(knitr)
#library(rockchalk)
library(tidyverse)
library(data.table)
#library(utils)
library(DataExplorer)
library(scales)
library(zoo)
library(aTSA)
library(tseries)
library(forecast)
# 2) read the Dataset sheet into “R”. The dataset will be called "data".
#data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
#Downloaded version
covid_data_raw <- read.csv("Data/covid_data.csv", sep = ",", stringsAsFactors = TRUE)
summary(covid_data_raw)
str(covid_data_raw)
covid_data <-  na.omit(covid_data_raw)
covid_data$dateRep=as.Date(covid_data$dateRep,"%d/%m/%Y")
summary(covid_data)
str(covid_data)
attach(covid_data)
create_report(data=covid_data, output_file = "EDA_Covid.html", output_dir = 'data/', report_title = "Data Profiling Report using DataExplorer Package", )
htmltools::includeHTML("data/EDA_Covid.html")
#days since 31-Dec-2019
BASELINE_DATE <- as.Date("123119", "%m%d%y")
covid_data$days_elapsed <- as.vector(difftime(as.Date(covid_data$dateRep,"%d/%m/%Y"), BASELINE_DATE, units = 'days'))
#incidence rate per 100 k
covid_data$incidence_per_10k <- cases / (popData2019/100000)
covid_data$fatality_per_10k <- deaths / (popData2019/100000)
summary(covid_data)
cd_byContinentDate = covid_data %>%
select (c("continentExp","cases","deaths","days_elapsed","incidence_per_10k","fatality_per_10k","Cumulative_number_for_14_days_of_COVID.19_cases_per_100000" )) %>%
group_by (days_elapsed,continentExp) %>%
summarise(cases=sum(cases), deaths=sum(deaths),incidence_per_10k = mean(incidence_per_10k), fatality_per_10k = mean(fatality_per_10k), cum_14d_avg = mean(Cumulative_number_for_14_days_of_COVID.19_cases_per_100000),.groups = 'drop')
l_c_cases <- ggplot(cd_byContinentDate, aes(x=days_elapsed, y=cases, group=continentExp, color=continentExp)) +
geom_line() +
#scale_y_continuous(trans='log10') +
facet_grid(. ~ continentExp)
l_c_deaths <- ggplot(cd_byContinentDate, aes(x=days_elapsed, y=deaths, group=continentExp, color=continentExp)) +
geom_line() +
#scale_y_continuous(trans='log10', breaks=trans_breaks('log10', function(x) 10^x),labels=trans_format('log10', math_format(10^.x))) +
facet_grid(. ~ continentExp)
l_c_cum14d <- ggplot(cd_byContinentDate, aes(x=days_elapsed, y=cum_14d_avg, group=continentExp, color=continentExp)) +
geom_line() +
#scale_y_continuous(trans='log10', breaks=trans_breaks('log10', function(x) 10^x),labels=trans_format('log10', math_format(10^.x))) +
facet_grid(. ~ continentExp)
l_c_iper10k <- ggplot(cd_byContinentDate, aes(x=days_elapsed, y=incidence_per_10k, group=continentExp, color=continentExp)) +
geom_line() +
#scale_y_continuous(trans='log10', breaks=trans_breaks('log10', function(x) 10^x),labels=trans_format('log10', math_format(10^.x))) +
facet_grid(. ~ continentExp)
l_c_fatalper10k <- ggplot(cd_byContinentDate, aes(x=days_elapsed, y=fatality_per_10k, group=continentExp, color=continentExp)) +
geom_line() +
#scale_y_continuous(trans='log10', breaks=trans_breaks('log10', function(x) 10^x),labels=trans_format('log10', math_format(10^.x))) +
facet_grid(. ~ continentExp)
grid.arrange(l_c_cases,l_c_deaths,l_c_cum14d, l_c_iper10k, l_c_fatalper10k, ncol=1)
#Plot Death versus Cases with Case on the horizontal axis
p_cd <- ggplot(cd_byContinentDate, aes(x=cases, y=deaths, color = continentExp)) +
geom_point() +
#scale_x_continuous(trans='log10', breaks=trans_breaks('log10', function(x) 10^x),labels=trans_format('log10', math_format(10^.x))) +
labs(title = "Cases vs Death By Continent", x = "Cases", y = "Death")
p_dr <- ggplot(cd_byContinentDate, aes(x=incidence_per_10k, y=fatality_per_10k, color = continentExp)) +
geom_point() +
#scale_x_continuous(trans='log10', breaks=trans_breaks('log10', function(x) 10^x),labels=trans_format('log10', math_format(10^.x))) +
labs(title = "Fatality Rate vs Incidence rate", y = "Fatality Rate", x = "Incidence rate")
#Add to the chart a straight line with zero intercept using this maximum value as the slope of the line.
#p_cd + geom_abline(intercept=0, slope = max(covid_data$fatality_rate_cum))
grid.arrange(p_cd,p_dr,ncol=1)
cd_byDate = covid_data %>%
select (c("cases","deaths","days_elapsed","incidence_per_10k","fatality_per_10k"),"Cumulative_number_for_14_days_of_COVID.19_cases_per_100000" ) %>%
group_by (days_elapsed) %>%
summarise(cases=sum(cases), deaths=sum(deaths),incidence_per_10k = mean(incidence_per_10k), fatality_per_10k = mean(fatality_per_10k), cum_14d_avg = mean(Cumulative_number_for_14_days_of_COVID.19_cases_per_100000),.groups = 'drop')
#The first row would show the histograms, the second row the boxplots and the third row the Q-Q plots
h_cum_14d_avg <- ggplot(cd_byDate, aes(x=cum_14d_avg)) +
geom_histogram(color="black", fill="steelblue")
#scale_x_continuous(trans='log10', breaks=trans_breaks('log10', function(x) 10^x),labels=trans_format('log10', math_format(10^.x)))
bp_cum_14d_avg <- ggplot(cd_byDate, aes(x=cum_14d_avg)) +
geom_boxplot(outlier.colour = "red", fill = "steelblue3",)
#scale_x_continuous(trans='log10', breaks=trans_breaks('log10', function(x) 10^x),labels=trans_format('log10', math_format(10^.x)))
qq_cum_14d_avg <- ggplot(cd_byDate, aes(sample=cum_14d_avg)) +
stat_qq()
h_incidence_rate <- ggplot(cd_byDate, aes(x=incidence_per_10k)) +
geom_histogram(color="black", fill="steelblue")
#scale_x_continuous(trans='log10', breaks=trans_breaks('log10', function(x) 10^x),labels=trans_format('log10', math_format(10^.x)))
bp_incidence_rate <- ggplot(cd_byDate, aes(x=incidence_per_10k)) +
geom_boxplot(outlier.colour = "red", fill = "steelblue3",)
#scale_x_continuous(trans='log10', breaks=trans_breaks('log10', function(x) 10^x),labels=trans_format('log10', math_format(10^.x)))
qq_incidence_rate <- ggplot(cd_byDate, aes(sample=incidence_per_10k)) +
stat_qq()
#The first row would show the histograms, the second row the boxplots and the third row the Q-Q plots
h_fatality_rate <- ggplot(cd_byDate, aes(x=fatality_per_10k)) +
geom_histogram(color="black", fill="steelblue")
#scale_x_continuous(trans='log10', breaks=trans_breaks('log10', function(x) 10^x),labels=trans_format('log10', math_format(10^.x)))
bp_fatality_rate <- ggplot(cd_byDate, aes(x=fatality_per_10k)) +
geom_boxplot(outlier.colour = "red", fill = "steelblue3",)
#scale_x_continuous(trans='log10', breaks=trans_breaks('log10', function(x) 10^x),labels=trans_format('log10', math_format(10^.x)))
qq_fatality_rate <- ggplot(cd_byDate, aes(sample=fatality_per_10k)) +
stat_qq()
grid.arrange(h_cum_14d_avg,bp_cum_14d_avg,qq_cum_14d_avg,h_incidence_rate,bp_incidence_rate,qq_incidence_rate,h_fatality_rate,bp_fatality_rate,qq_fatality_rate,ncol=3)
#TODO - Formatting of the graphs and labels
#TODO - cumulative sum by continent
#cd_byContinentDate <- cd_byContinentDate %>%
#                        group_by (cd_byContinentDate$continentExp) %>%
#                        mutate(cumsum_cases = cumsum(cd_byContinentDate$cases))
covid_data_ind = filter(covid_data, covid_data$geoId == 'IN')
covid_data_ind$dateVal=as.Date(covid_data_ind$dateRep,"%d/%m/%Y")
covid_data_ind_cum <- covid_data_ind %>%
mutate(cases_14da = rollmean(covid_data_ind$cases, k = 14, fill = NA, align='right'),
deaths_14da = rollmean(covid_data_ind$deaths, k = 14, fill = NA, align='right'),
)
covid_data_ita = filter(covid_data, covid_data$geoId == 'IT')
covid_data_ita$dateVal=as.Date(covid_data_ita$dateRep,"%d/%m/%Y")
covid_data_ita_cum <- covid_data_ita %>%
mutate(cases_14da = rollmean(covid_data_ita$cases, k = 14, fill = NA, align='right'),
deaths_14da = rollmean(covid_data_ita$deaths, k = 14, fill = NA, align='right'),
)
summary(covid_data_ind_cum)
summary(covid_data_ita_cum)
l_ind_ir <- ggplot(covid_data_ind_cum, aes(x=days_elapsed, y=incidence_per_10k)) +
geom_line() +
labs(title = "India")
l_ind_fr <- ggplot(covid_data_ind_cum, aes(x=days_elapsed, y=fatality_per_10k)) +
geom_line() +
labs(title = "India")
l_ind_c14da <- ggplot(covid_data_ind_cum, aes(x=days_elapsed, y=cases_14da)) +
geom_line() +
labs(title = "India")
l_ind_d14da <- ggplot(covid_data_ind_cum, aes(x=days_elapsed, y=deaths_14da)) +
geom_line() +
labs(title = "India")
l_ita_ir <- ggplot(covid_data_ita_cum, aes(x=days_elapsed, y=incidence_per_10k)) +
geom_line() +
labs(title = "Italy")
l_ita_fr <- ggplot(covid_data_ita_cum, aes(x=days_elapsed, y=fatality_per_10k)) +
geom_line() +
labs(title = "Italy")
l_ita_c14da <- ggplot(covid_data_ita_cum, aes(x=days_elapsed, y=cases_14da)) +
geom_line() +
labs(title = "Italy")
l_ita_d14da <- ggplot(covid_data_ita_cum, aes(x=days_elapsed, y=deaths_14da)) +
geom_line() +
labs(title = "Italy")
grid.arrange(l_ind_ir,l_ind_fr, l_ind_c14da, l_ind_d14da, l_ita_ir,l_ita_fr, l_ita_c14da, l_ita_d14da, ncol=4)
gen_sample = function(cnt, n, seed, data = covid_data_ind_cum, replace = TRUE){
set.seed(seed)
tmp_sample = rep(1:cnt,0)
for (i in 1:cnt)
{tmp_sample[i] = mean(sample(data, n, replace=TRUE))}
return (tmp_sample)
}
sampleInd = gen_sample(100, 30, seed = 456, data= covid_data_ind_cum$incidence_per_10k)
sampleIta = gen_sample(100, 30, seed = 789, data= covid_data_ita_cum$incidence_per_10k)
#function to compute mean, sd and variance
sample_stat = function(sp) {
return( c(mean(sp), sd(sp), var(sp)) )
}
row_names <- c("India","Italy")
col_names <- c("Mean","Sample std dev","Sample variance")
matrix(c(sample_stat(sampleInd), sample_stat(sampleIta)), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(row_names, col_names))
df_sample1 = as.data.frame(sampleInd)
colnames(df_sample1) = c("x_val")
df_sample2 = as.data.frame(sampleIta)
colnames(df_sample2) = c("x_val")
# Create histograms of "sample1" and "sample2" with normal density curves superimposed
#freq = FALSE - did not find equivalent in ggplot
h_sample_ind = ggplot(df_sample1, aes(x=x_val)) +
geom_histogram(color="black", fill="steelblue", aes(y = ..density..)) +
labs(title="India Incidence Rate Sample Histogram", x = "X_VAL", y = "Frequency") +
stat_function(fun = dnorm,args = list(mean = mean(df_sample1$x), sd = sd(df_sample1$x)), col = "Red", size = 1)
h_sample_ita = ggplot(df_sample2, aes(x=x_val)) +
geom_histogram(color="black", fill="steelblue", aes(y = ..density..)) +
labs(title="Italy Incidence Rate Sample Histogram", x = "X_VAL", y = "Frequency") +
stat_function(fun = dnorm,args = list(mean = mean(df_sample2$x), sd = sd(df_sample2$x)), col = "Red", size = 1)
grid.arrange(h_sample_ind, h_sample_ita, ncol=1)
df_ind_ita <- data.frame(
country = rep(c("India","Italy"), each = 100),
incidence_rate = c(sampleInd, sampleIta)
)
summary(df_ind_ita)
ftest_incidence_rate <- var.test(incidence_rate ~ country, data = df_ind_ita)
ftest_incidence_rate
ttest_incidence_rate <- t.test(incidence_rate ~ country, data = df_ind_ita, var.equal = FALSE)
ttest_incidence_rate
covid_data_corr = covid_data %>%
select (c("cases","deaths","dateRep","incidence_per_10k","fatality_per_10k","Cumulative_number_for_14_days_of_COVID.19_cases_per_100000" )) %>%
group_by (dateRep) %>%
summarise(cases=sum(cases), deaths=sum(deaths),incidence_per_10k = mean(incidence_per_10k), fatality_per_10k = mean(fatality_per_10k),cum_14d_avg = mean(Cumulative_number_for_14_days_of_COVID.19_cases_per_100000),.groups = 'drop')
covid_data_corr$dateRep <- as.Date(covid_data_corr$dateRep,"%d/%m/%Y")
kable(summary(covid_data_corr))
p_corr_fc <- ggplot(covid_data_corr, aes(incidence_per_10k, fatality_per_10k)) +
geom_point()
stat_smooth(method = "lm",
formula = fatality_per_10k ~ incidence_per_10k,
geom = "smooth")
grid.arrange(p_corr_fc,ncol=1)
lm_cases <- lm(fatality_per_10k ~ incidence_per_10k, data = covid_data_corr)
#'Correlation Based on Number of Cases per Day'
summary(lm_cases)
model_res_cases = data.table(VALUE = lm_cases$residuals)
h_residuals_cases <- ggplot(model_res_cases, aes(VALUE, fill = ..count..)) +
geom_histogram() +
labs(title = "AvgFatalityRate vs AvgIncidenceRate", y = "Frequency", x = "Residuals")
qq_residuals_cases <- ggplot(model_res_cases, aes(sample = VALUE)) +
stat_qq(color = "steelblue") +
stat_qq_line() +
labs(title = "AvgFatalityRate vs AvgIncidenceRate", y = "Sample Quantiles", x = "Theoretical Quantiles")
grid.arrange(h_residuals_cases, qq_residuals_cases, ncol = 2)
p_corr_fc_raw <- ggplot(covid_data_corr, aes(cases, deaths)) +
geom_point()
stat_smooth(method = "lm",
formula = deaths ~ cases,
geom = "smooth")
grid.arrange(p_corr_fc_raw,ncol=1)
lm_cases_raw <- lm(deaths ~ cases, data = covid_data_corr)
#'Correlation Based on Number of Cases per Day'
summary(lm_cases_raw)
model_res_cases_raw = data.table(VALUE = lm_cases_raw$residuals)
h_residuals_cum_cases_raw <- ggplot(model_res_cases_raw, aes(VALUE, fill = ..count..)) +
geom_histogram() +
labs(title = "Residuals for Cases vs Deaths", y = "Frequency", x = "Residuals")
qq_residuals_cum_cases_raw <- ggplot(model_res_cases_raw, aes(sample = VALUE)) +
stat_qq(color = "steelblue") +
stat_qq_line() +
labs(title = "Residuals for Cases vs Deaths", y = "Sample Quantiles", x = "Theoretical Quantiles")
grid.arrange(h_residuals_cum_cases_raw, qq_residuals_cum_cases_raw, ncol = 2)
covid_data_corr_cum <- covid_data_corr %>%
mutate(cases_14da = rollmean(covid_data_corr$cases, k = 14, fill = NA, align='right'),
deaths_14da = rollmean(covid_data_corr$deaths, k = 14, fill = NA, align='right'),
cases_21da = rollmean(covid_data_corr$cases, k = 21, fill = NA, align='right'),
deaths_21da = rollmean(covid_data_corr$deaths, k = 21, fill = NA, align='right'),
cases_30da = rollmean(covid_data_corr$cases, k = 30, fill = NA, align='right'),
deaths_30da = rollmean(covid_data_corr$deaths, k = 30, fill = NA, align='right'),
)
summary(covid_data_corr_cum)
p_corr_fc_cum14 <- ggplot(covid_data_corr_cum, aes(cases_14da, deaths_14da), na.rm = TRUE) +
geom_point()
stat_smooth(method = "lm",
formula = deaths_14da ~ cases_14da,
geom = "smooth")
p_corr_fc_cum21 <- ggplot(covid_data_corr_cum, aes(cases_21da, deaths_21da), na.rm = TRUE) +
geom_point()
stat_smooth(method = "lm",
formula = deaths_21da ~ cases_21da,
geom = "smooth")
p_corr_fc_cum30 <- ggplot(covid_data_corr_cum, aes(cases_30da, deaths_30da), na.rm = TRUE) +
geom_point()
stat_smooth(method = "lm",
formula = deaths_30da ~ cases_30da,
geom = "smooth")
grid.arrange(p_corr_fc_cum14,p_corr_fc_cum21,p_corr_fc_cum30,ncol=1)
# 14 days
lm_cases_cum14 <- lm(deaths_14da ~ cases_14da, data = covid_data_corr_cum)
summary(lm_cases_cum14)
model_res_cases_cum14 = data.table(VALUE = lm_cases_cum14$residuals)
# 21 days
lm_cases_cum21 <- lm(deaths_21da ~ cases_21da, data = covid_data_corr_cum)
summary(lm_cases_cum21)
model_res_cases_cum21 = data.table(VALUE = lm_cases_cum21$residuals)
# 30 days
lm_cases_cum30 <- lm(deaths_30da ~ cases_30da, data = covid_data_corr_cum)
summary(lm_cases_cum30)
model_res_cases_cum30 = data.table(VALUE = lm_cases_cum30$residuals)
h_residuals_cum_cases_cum14 <- ggplot(model_res_cases_cum14, aes(VALUE, fill = ..count..)) +
geom_histogram() +
labs(title = " Cumulative 14d Avg", y = "Frequency", x = "Residuals")
qq_residuals_cum_cases_cum14 <- ggplot(model_res_cases_cum14, aes(sample = VALUE)) +
stat_qq(color = "steelblue") +
stat_qq_line() +
labs(title = "Cumulative 14d Avg", y = "Sample Quantiles", x = "Theoretical Quantiles")
h_residuals_cum_cases_cum21 <- ggplot(model_res_cases_cum21, aes(VALUE, fill = ..count..)) +
geom_histogram() +
labs(title = "Cumulative 21d Avg", y = "Frequency", x = "Residuals")
qq_residuals_cum_cases_cum21 <- ggplot(model_res_cases_cum21, aes(sample = VALUE)) +
stat_qq(color = "steelblue") +
stat_qq_line() +
labs(title = "Cumulative 21d Avg", y = "Sample Quantiles", x = "Theoretical Quantiles")
h_residuals_cum_cases_cum30 <- ggplot(model_res_cases_cum30, aes(VALUE, fill = ..count..)) +
geom_histogram() +
labs(title = "Cumulative 30d Avg", y = "Frequency", x = "Residuals")
qq_residuals_cum_cases_cum30 <- ggplot(model_res_cases_cum30, aes(sample = VALUE)) +
stat_qq(color = "steelblue") +
stat_qq_line() +
labs(title = "Cumulative 30d Avg", y = "Sample Quantiles", x = "Theoretical Quantiles")
grid.arrange(h_residuals_cum_cases_cum14, qq_residuals_cum_cases_cum14,h_residuals_cum_cases_cum21, qq_residuals_cum_cases_cum21,h_residuals_cum_cases_cum30, qq_residuals_cum_cases_cum30, ncol = 2)
covid_data_us = filter(covid_data_raw, covid_data_raw$geoId == 'US')
covid_data_us$dateRep <- as.Date(covid_data_us$dateRep,"%d/%m/%Y")
covid_data_us$days_elapsed <- as.vector(difftime(as.Date(covid_data_us$dateRep,"%d/%m/%Y"), BASELINE_DATE, units = 'days'))
summary(covid_data_us)
p_lr_cases <- ggplot(covid_data_us, aes(days_elapsed, cases, color = month)) +
geom_point()
stat_smooth(method = "lm",
formula = cases ~ days_elapsed,
geom = "smooth")
p_lr_deaths <- ggplot(covid_data_us, aes(days_elapsed, deaths, color = month)) +
geom_point()
stat_smooth(method = "lm",
formula = deaths ~ days_elapsed,
geom = "smooth")
grid.arrange(p_lr_cases,p_lr_deaths,ncol=1)
lm_cases <- lm(cases ~ days_elapsed, data = covid_data_us)
summary(lm_cases)
model_res_cases = data.table(VALUE = lm_cases$residuals)
h_residuals_cases <- ggplot(model_res_cases, aes(VALUE, fill = ..count..)) +
geom_histogram() +
labs(title = "Histogram of Residuals for Cases", y = "Frequency", x = "Residuals")
qq_residuals_cases <- ggplot(model_res_cases, aes(sample = VALUE)) +
stat_qq(color = "steelblue") +
stat_qq_line() +
labs(title = "QQ Plot of Residuals for Cases", y = "Sample Quantiles", x = "Theoretical Quantiles")
lm_deaths <- lm(deaths ~ days_elapsed, data = covid_data_us)
summary(lm_deaths)
model_res_deaths = data.table(VALUE = lm_deaths$residuals)
h_residuals_deaths <- ggplot(model_res_deaths, aes(VALUE, fill = ..count..)) +
geom_histogram() +
labs(title = "Histogram of Residuals for Cases", y = "Frequency", x = "Residuals")
qq_residuals_deaths <- ggplot(model_res_deaths, aes(sample = VALUE)) +
stat_qq(color = "steelblue") +
stat_qq_line() +
labs(title = "QQ Plot of Residuals for Cases", y = "Sample Quantiles", x = "Theoretical Quantiles")
grid.arrange(h_residuals_cases, qq_residuals_cases,h_residuals_deaths, qq_residuals_deaths, ncol = 2)
covid_data_us = filter(covid_data_raw, covid_data_raw$geoId == 'US')
covid_data_us$dateVal=as.Date(covid_data_us$dateRep,"%d/%m/%Y")
l_cases <- ggplot(covid_data_us, aes(x=as.Date(dateRep,"%d/%m/%Y"), y=cases)) +
geom_line() + scale_x_date(date_breaks = "1 month", date_labels = "%b %y") +
xlab("Months") + ylab("Cases")+
ggtitle("Number of Cases in the US")+
geom_area(fill="steelblue", color="black") +
geom_smooth(method = lm, col = "red", se = FALSE)
l_deaths <- ggplot(covid_data_us, aes(x=as.Date(dateRep,"%d/%m/%Y"), y=deaths)) +
geom_line() + scale_x_date(date_breaks = "1 month", date_labels = "%b %y") +
xlab("Months") + ylab("Deaths")+
ggtitle("Number of deaths in the US")+
geom_area(fill="lightblue", color="black") +
geom_smooth(method = lm, col = "red", se = FALSE)
grid.arrange(l_cases, l_deaths,ncol = 1)
# Cases
covid_data_us_p_c = covid_data_us [,c("dateVal","cases")]
#sorted data set to ensure that the new date values are added to the end
covid_data_us_ps_c = covid_data_us_p_c[order(covid_data_us_p_c$dateVal, decreasing = FALSE),]
covid_data_us_ps_cf <- zoo(covid_data_us_ps_c$cases, seq(from = as.Date("2019-12-31","%Y-%m-%d"), to = as.Date("2020-12-14","%Y-%m-%d"), by = 1))
summary(covid_data_us_ps_cf)
#Deaths
covid_data_us_p_d = covid_data_us [,c("dateVal","deaths")]
#sorted data set to ensure that the new date values are added to the end
covid_data_us_ps_d = covid_data_us_p_d[order(covid_data_us_p_d$dateVal, decreasing = FALSE),]
covid_data_us_ps_df <- zoo(covid_data_us_ps_d$deaths, seq(from = as.Date("2019-12-31","%Y-%m-%d"), to = as.Date("2020-12-14","%Y-%m-%d"), by = 1))
summary(covid_data_us_ps_df)
par(mfrow = c(2,1))
plot(covid_data_us_ps_cf, main = "COVID Cases By Date - US")
plot(covid_data_us_ps_df, main = "COVID Deaths By Date - US")
covid_data_us_ps_cf_stat = diff(covid_data_us_ps_cf)
covid_data_us_ps_df_stat = diff(covid_data_us_ps_df)
par(mfrow = c(2,1))
plot(covid_data_us_ps_cf_stat,  main = "COVID Cases By Date - US, Differenced Data")
plot(covid_data_us_ps_df_stat,  main = "COVID Death By Date - US, Differenced Data")
adf.test(as.matrix(covid_data_us_ps_cf_stat))
adf.test(as.matrix(covid_data_us_ps_df_stat))
acf(covid_data_us_ps_cf_stat)
acf(covid_data_us_ps_df_stat)
pacf(covid_data_us_ps_cf_stat)
pacf(covid_data_us_ps_df_stat)
#Cases
arima_funct_c <- auto.arima(covid_data_us_ps_cf_stat)
arima_funct_c
# lets use the auto.arima function to forecast 5 days more
forecast_cases <- forecast(arima_funct_c, h=5)
additional_cases<- round(sum(forecast_cases$upper[,2]),0)
# [1] 129563
total_number_of_cases <- round(sum(covid_data_us_p_c$cases)+additional_cases,0)
#16386317
#Deaths
arima_funct_d <- auto.arima(covid_data_us_ps_df_stat)
arima_funct_d
# lets use the auto.arima function to forecast 5 days more
forecast_deaths <- forecast(arima_funct_d, h=5)
additional_deaths <- round(sum(forecast_deaths$upper[,2]),0)
# [1] 6158
total_number_of_deaths <- round(sum(covid_data_us_p_d$deaths)+additional_deaths,0)
#305335
plot(forecast_cases)
plot(forecast_deaths)
#Cases
delta_c <- (forecast_cases$lower[,2]+forecast_deaths$upper[,2])/2
#as.numeric(max(covid_data_us_p_d$dateVal))
#18610
predicted_c_5 <- data.frame(date=seq(from=18611,by=1,length=5),new_cases=delta_c)
original_c <- data.frame(date=as.numeric(covid_data_us_ps_c$dateVal),new_cases=c(0,covid_data_us_ps_cf_stat))
z_c <- rbind(original_c,predicted_c_5)
z_c$date <- as.Date(z_c$date)
forecast_data_c <- as.data.frame(forecast_cases)
forecast_data_c <- data.frame(date=seq(from=18611,by=1,length=5),forecast_data_c, y = delta_c)
forecast_data_c$date <- as.Date(forecast_data_c$date)
#Deaths
delta_d <- (forecast_deaths$lower[,2]+forecast_deaths$upper[,2])/2
#as.numeric(max(covid_data_us_p_d$dateVal))
#18610
predicted_d_5 <- data.frame(date=seq(from=18611,by=1,length=5),new_deaths=delta_d)
original_d <- data.frame(date=as.numeric(covid_data_us_ps_d$dateVal),new_deaths=c(0,covid_data_us_ps_df_stat))
z_d <- rbind(original_d,predicted_d_5)
z_d$date <- as.Date(z_d$date)
forecast_data_d <- as.data.frame(forecast_deaths)
forecast_data_d <- data.frame(date=seq(from=18611,by=1,length=5),forecast_data_d, y = delta_d)
forecast_data_d$date <- as.Date(forecast_data_d$date)
#graphs
graph_cases <- ggplot(data=z_c,aes(x=date,y=new_cases),show.legend = FALSE)+
theme(axis.text.x=element_text(angle=60, hjust=1))+
geom_line(data=original_c,aes(x=as.Date(date),y=new_cases))+
geom_ribbon(data=forecast_data_c,aes(x = date,ymin =Lo.95, ymax =Hi.95), inherit.aes = FALSE,fill = "lightsteelblue2")+
geom_ribbon(data=forecast_data_c,aes(x = date,ymin =Lo.80, ymax =Hi.80), inherit.aes = FALSE,fill = "lightsteelblue3")+
geom_line(data=forecast_data_c,aes(x=date,y=y),size=1,color='purple')+
ggtitle("Forecasts for Cases from ARIMA(2,0,2) with zero mean")+
scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y")+
labs(x="Date",y="New Cases")
graph_deaths <- ggplot(data=z_d,aes(x=date,y=new_deaths),show.legend = FALSE)+
theme(axis.text.x=element_text(angle=60, hjust=1))+
geom_line(data=original_d,aes(x=as.Date(date),y=new_deaths))+
geom_ribbon(data=forecast_data_d,aes(x = date,ymin =Lo.95, ymax =Hi.95), inherit.aes = FALSE,fill = "lightsteelblue2")+
geom_ribbon(data=forecast_data_d,aes(x = date,ymin =Lo.80, ymax =Hi.80), inherit.aes = FALSE,fill = "lightsteelblue3")+
geom_line(data=forecast_data_d,aes(x=date,y=y),size=1,color='purple')+
ggtitle("Forecasts for Deaths from ARIMA(5,0,1) with zero mean")+
scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y")+
labs(x="Date",y="New Deaths")
grid.arrange(graph_cases,graph_deaths,ncol=1)
kable(forecast_data_c, caption='Forecasted Cases')
kable(forecast_data_d, caption='Forecasted Deaths')
knitr::opts_chunk$set(echo = FALSE, eval = TRUE)
# 1) Load/attach the following packages via library():
# NOTE:  packages must be installed via install.packages() before they can be loaded.
#install.packages("zoo")
#install.packages("aTSA")
#install.packages("tseries")
#install.packages("forecast")
#install.packages("lubridate")
library(dplyr)
#library(flux)
library(ggplot2)
library(gridExtra)
library(knitr)
#library(rockchalk)
library(tidyverse)
library(data.table)
#library(utils)
library(DataExplorer)
library(scales)
library(zoo)
library(aTSA)
library(tseries)
library(forecast)
us_data <- read.csv("USStates.csv", sep = ",", stringsAsFactors = TRUE, na.strings = "", fileEncoding = "UTF-8-BOM")
create_report(data=us_data, output_file = "EDA_States.html", output_dir = 'data/', report_title = "Data Profiling Report using DataExplorer Package", )
htmltools::includeHTML("data/EDA_States.html")
plot_correlation(na.omit(final_data), maxcat = 5L)
plot_correlation(na.omit(us_data), maxcat = 5L)
plot_correlation(na.omit(us_data), type = "c", maxcat = 5L)
plot_correlation(na.omit(us_data), type = "d", maxcat = 5L)
plot_correlation(na.omit(us_data), type = "c", maxcat = 5L)
